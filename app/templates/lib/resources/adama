
{
    "apiVersion": "0.3",
    "apis": [
        {
            "description": null,
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getNamespaces",
                    "notes": "Return a list of all registered namespaces.",
                    "parameters": [],
                    "responseClass": "NamespacesResponseModel",
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "list of namespaces"
                        },
                        {
                            "code": 500,
                            "message": "internal error"
                        }
                    ],
                    "summary": "Get list of namespaces"
                },
                {
                    "method": "POST",
                    "nickname": "createNamespace",
                    "notes": "Create a new namespace.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "name of the namespace",
                            "name": "name",
                            "paramType": "form",
                            "required": true
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "url associated to this namespace",
                            "name": "url",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "description of this namespace",
                            "name": "description",
                            "paramType": "form",
                            "required": false
                        }
                    ],
                    "responseClass": "CreatedNamespaceModel",
                    "summary": "Create a new namespace"
                }
            ],
            "path": "/namespaces"
        },
        {
            "description": null,
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getStatus",
                    "notes": "Return the status of the Adama server.",
                    "parameters": [],
                    "responseClass": "StatusModel",
                    "responseMessages": [
                        {
                            "code": 200,
                            "message": "server is running"
                        },
                        {
                            "code": 504,
                            "message": "server is down"
                        }
                    ],
                    "summary": "Return status of the server"
                }
            ],
            "path": "/status"
        },
        {
            "description": null,
            "operations": [
                {
                    "method": "DELETE",
                    "nickname": "deleteNamespace",
                    "notes": "Delete a namespace. Note that this operation always succeed regardless of the existence of the namespace.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "name of namespace",
                            "name": "namespace",
                            "paramType": "path",
                            "required": true
                        }
                    ],
                    "responseClass": "DeleteResponseModel",
                    "summary": "Delete a namespace"
                },
                {
                    "method": "GET",
                    "nickname": "getNamespace",
                    "notes": "Return information about a namespace.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "name of namespace",
                            "name": "namespace",
                            "paramType": "path",
                            "required": true
                        }
                    ],
                    "responseClass": "NamespaceResponseModel",
                    "summary": "Get information about a namespace"
                }
            ],
            "path": "/{namespace}"
        },
        {
            "description": null,
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getServices",
                    "notes": "List all services registered in a given namespace.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "name of namespace",
                            "name": "namespace",
                            "paramType": "path",
                            "required": true
                        }
                    ],
                    "responseClass": "ServicesResponseModel",
                    "summary": "List all services"
                },
                {
                    "consumes": "multipart/form-data",
                    "method": "POST",
                    "nickname": "createService",
                    "notes": "Create a new service.\n\n            <p> The preferred way to create a new service is by using a git\n            repository with a metadata file 'metadata.yml'.  Use the\n            parameter <b>git_repository</b> to specify a url from where to\n            clone the repository. If the metadata file is not located at\n            the root, then use the parameter <b>metadata</b> to point to\n            it, relative to the root of the git repository.  All the other\n            parameters can be specified in the metadata file.</p>\n\n            <p> The parameters used as form values can be used to overwrite\n            the values specified in the metadata file.<p>\n\n",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "namespace of the service",
                            "name": "namespace",
                            "paramType": "path",
                            "required": true
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "url of git repository",
                            "name": "git_repository",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "path of metadata file relative to git_repository root",
                            "name": "metadata",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "name of the service",
                            "name": "name",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "type of the adapter",
                            "name": "type",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "version of the adapter",
                            "name": "version",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "url of the third party data service",
                            "name": "url",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": true,
                            "dataType": "string",
                            "description": "ip or domain to be whitelisted",
                            "name": "whitelist",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "description of the service",
                            "name": "description",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": true,
                            "dataType": "string",
                            "description": "third party package needed by the adapter",
                            "name": "requirements",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "url to notify when adapter is ready",
                            "name": "notify",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "location of the array of result in response",
                            "name": "json_path",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "path of main module relative to git_repository root",
                            "name": "main_module",
                            "paramType": "form",
                            "required": false
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "File",
                            "description": "type of the adapter",
                            "name": "code",
                            "paramType": "form",
                            "required": false
                        }
                    ],
                    "responseClass": "CreatedServiceModel",
                    "summary": "Create new service"
                }
            ],
            "path": "/{namespace}/services"
        },
        {
            "description": null,
            "operations": [
                {
                    "method": "DELETE",
                    "nickname": "deleteService",
                    "notes": "Delete a service in a namespace. Note that this operation always succeed. Also, the service is deleted only in the given namespace, and since the name includes the version, no other version of the same service is deleted.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "namespace of the service",
                            "name": "namespace",
                            "paramType": "path",
                            "required": true
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "name of the service, including the version",
                            "name": "service",
                            "paramType": "path",
                            "required": true
                        }
                    ],
                    "responseClass": "DeleteResponseModel",
                    "summary": "Delete a service"
                },
                {
                    "method": "GET",
                    "nickname": "getService",
                    "notes": "Obtain information about a service.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "namespace of the service",
                            "name": "namespace",
                            "paramType": "path",
                            "required": true
                        },
                        {
                            "allowMultiple": false,
                            "dataType": "string",
                            "description": "name of the service, including the version",
                            "name": "service",
                            "paramType": "path",
                            "required": true
                        }
                    ],
                    "responseClass": "ServiceResponseModel",
                    "summary": "Get information about a service"
                }
            ],
            "path": "/{namespace}/{service}"
        },
        {
            "description": null,
            "operations": [
                {
                    "method": "GET",
                    "nickname": "search",
                    "notes": "Perform a search query using the adapter registered for this\n            service.\n\n            <p>The parameters and response type of this operation are\n            dependent on the particular service.</p>\n\n",
                    "parameters": [
                        {
                            "dataType": "string",
                            "name": "namespace",
                            "paramType": "path"
                        },
                        {
                            "dataType": "string",
                            "name": "service",
                            "paramType": "path"
                        }
                    ],
                    "summary": "Perform a query using a service"
                }
            ],
            "path": "/{namespace}/{service}/search"
        },
        {
            "description": null,
            "operations": [
                {
                    "method": "GET",
                    "nickname": "list",
                    "notes": "Perform a list query using the adapter registered for this\n            service.\n\n            <p>This query takes no parameters other than pagination\n            specific parameters. It returns a list of objects.</p>\n\n",
                    "parameters": [
                        {
                            "dataType": "string",
                            "name": "namespace",
                            "paramType": "path"
                        },
                        {
                            "dataType": "string",
                            "name": "service",
                            "paramType": "path"
                        }
                    ],
                    "summary": "List all objects using a service"
                }
            ],
            "path": "/{namespace}/{service}/list"
        },
        {
            "description": null,
            "operations": [
                {
                    "method": "GET",
                    "nickname": "getAccess",
                    "notes": "Perform a GET request using a passthrough adapter.\n\n        <p>The parameters and response type are dependent on the particular\n        service.</p>\n\n        ",
                    "parameters": [
                        {
                            "dataType": "string",
                            "name": "namespace",
                            "paramType": "path"
                        },
                        {
                            "dataType": "string",
                            "name": "service",
                            "paramType": "path"
                        }
                    ],
                    "summary": "Perform a GET request via a passthrough adapter"
                },
                {
                    "method": "POST",
                    "nickname": "postAccess",
                    "notes": "Perform a POST request using a passthrough adapter.\n\n        <p>The parameters and response type are dependent on the particular\n        service.</p>\n\n        ",
                    "parameters": [
                        {
                            "dataType": "string",
                            "name": "namespace",
                            "paramType": "path"
                        },
                        {
                            "dataType": "string",
                            "name": "service",
                            "paramType": "path"
                        }
                    ],
                    "summary": "Perform a POST request via a passthrough adapter"
                }
            ],
            "path": "/{namespace}/{service}/access"
        }
    ],
    "basePath": "https://api.araport.org/community/v0.3",
    "models": {
        "CreatedNamespaceModel": {
            "description": null,
            "id": "CreatedNamespaceModel",
            "properties": {
                "result": {
                    "description": "Url of the new created namespace",
                    "type": "string"
                },
                "status": {
                    "description": "success or error",
                    "type": "string"
                }
            }
        },
        "CreatedServiceModel": {
            "description": null,
            "id": "CreatedServiceModel",
            "properties": {
                "message": {
                    "description": "registration started",
                    "type": "string"
                },
                "result": {
                    "description": null,
                    "type": "ServiceURLsModel"
                },
                "status": {
                    "description": "success of error",
                    "type": "string"
                }
            }
        },
        "DeleteResponseModel": {
            "description": null,
            "id": "DeleteResponseModel",
            "properties": {
                "status": {
                    "description": "success",
                    "type": "string"
                }
            }
        },
        "NamespaceModel": {
            "description": null,
            "id": "NamespaceModel",
            "properties": {
                "description": {
                    "description": "Description of the namespace",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the namespace",
                    "type": "string"
                },
                "self": {
                    "description": "Url to access this namespace",
                    "type": "string"
                },
                "url": {
                    "description": "Url associated to the namespace (for documentation purposes)",
                    "type": "string"
                }
            }
        },
        "NamespaceResponseModel": {
            "description": null,
            "id": "NamespaceResponseModel",
            "properties": {
                "result": {
                    "description": null,
                    "type": "NamespaceModel"
                },
                "status": {
                    "description": "success or error",
                    "type": "string"
                }
            }
        },
        "NamespacesResponseModel": {
            "description": "List of namespaces",
            "id": "NamespacesResponseModel",
            "properties": {
                "result": {
                    "description": null,
                    "items": {
                        "$ref": "NamespaceModel"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "success or error",
                    "type": "string"
                }
            }
        },
        "ServiceModel": {
            "description": null,
            "id": "ServiceModel",
            "properties": {
                "code_dir": {
                    "description": "(internal) location of adapter code in the server",
                    "type": "string"
                },
                "description": {
                    "description": "description of the service",
                    "type": "string"
                },
                "json_path": {
                    "description": "location of array of results in response",
                    "type": "string"
                },
                "main_module": {
                    "description": "path to main module",
                    "type": "string"
                },
                "metadata": {
                    "description": "path to metadata file",
                    "type": "string"
                },
                "name": {
                    "description": "name of the service",
                    "type": "string"
                },
                "namespace": {
                    "description": "namespace of the service",
                    "type": "string"
                },
                "notify": {
                    "description": "url to notify via POST when adapter is ready",
                    "type": "string"
                },
                "requirements": {
                    "description": "third party packages needed by the adapter",
                    "items": {
                        "$ref": "string"
                    },
                    "type": "array"
                },
                "self": {
                    "description": "url to access this service",
                    "type": "string"
                },
                "type": {
                    "description": "type of the adapter",
                    "type": "string"
                },
                "url": {
                    "description": "url of third party data service",
                    "type": "string"
                },
                "version": {
                    "description": "version of the adapter",
                    "type": "string"
                },
                "whitelist": {
                    "description": "ip's or domains the adapter can access",
                    "items": {
                        "$ref": "string"
                    },
                    "type": "array"
                }
            }
        },
        "ServiceResponseModel": {
            "description": null,
            "id": "ServiceResponseModel",
            "properties": {
                "result": {
                    "description": null,
                    "type": "ServiceModel"
                },
                "status": {
                    "description": "success or error",
                    "type": "string"
                }
            }
        },
        "ServiceURLsModel": {
            "description": null,
            "id": "ServiceURLsModel",
            "properties": {
                "list_url": {
                    "description": "url to list endpoint of service",
                    "type": "string"
                },
                "notification": {
                    "description": "url to notify when service is ready",
                    "type": "string"
                },
                "search_url": {
                    "description": "url to search endpoint of service",
                    "type": "string"
                },
                "state_url": {
                    "description": "url to check state of registration",
                    "type": "string"
                }
            }
        },
        "ServicesResponseModel": {
            "description": null,
            "id": "ServicesResponseModel",
            "properties": {
                "result": {
                    "description": null,
                    "items": {
                        "$ref": "ServiceModel"
                    },
                    "type": "array"
                },
                "status": {
                    "description": "success or error",
                    "type": "string"
                }
            }
        },
        "StatusModel": {
            "description": "Status response.",
            "id": "StatusModel",
            "properties": {
                "api": {
                    "description": "version of the API",
                    "type": "string"
                },
                "hash": {
                    "description": "commit hash of Adama server currently running",
                    "type": "string"
                },
                "status": {
                    "description": "success or error",
                    "type": "string"
                }
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "resourcePath": "/",
    "swaggerVersion": "1.2"
}
